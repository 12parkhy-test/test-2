{"version":3,"sources":["logo.svg","components/Home.js","App.js","components/Ex1.js","components/Ex2.js","serviceWorker.js","index.js"],"names":["module","exports","Home","this","props","state","style","textAlign","Component","App","onChange","setState","prevState","darkMode","JSON","parse","localStorage","getItem","prevProps","stringify","setItem","className","marginBottom","backgroundColor","height","paddingRight","paddingTop","type","id","checked","htmlFor","color","fontWeight","fontSize","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,2JCEtBC,E,uKAEKC,KAAKC,MAAfC,MACR,OACQ,yBAAKC,MAAO,CAACC,UAAW,WAAxB,iB,GAJkBC,aCoEnBC,GCpEkBD,YCAAA,Y,kDFO/B,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAkBRM,SAAW,WACT,EAAKC,UAAS,SAACC,GACb,MAAO,CAAEC,UAAWD,EAAUC,cAnBhC,EAAKR,MAAQ,CACXQ,UAAU,GAHK,E,gEAQjB,IAAMA,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aACjDd,KAAKQ,UAAS,SAACC,GACb,MAAO,CAAEC,SAAUA,Q,yCAIJK,EAAWN,GAC5B,IAAMC,EAAWC,KAAKK,UAAUhB,KAAKE,MAAMQ,UAC3CG,aAAaI,QAAQ,WAAYP,K,+BAUjC,OACE,kBAAC,IAAD,KACE,yBAAKQ,UAAWlB,KAAKE,MAAMQ,SAAW,YAAc,eAClD,yBAAKP,MAAO,CAAEgB,aAAc,SAAUC,gBAAiBpB,KAAKE,MAAMQ,SAAW,UAAY,UAAWW,OAAQ,SAC1G,yBAAKH,UAAU,+BAA+Bf,MAAO,CAAEC,UAAW,QAASkB,aAAc,SAAUC,WAAY,WAC7G,8BACE,2BACEC,KAAK,WACLN,UAAU,uBACVO,GAAG,gBACHC,QAAS1B,KAAKE,MAAMQ,SACpBH,SAAUP,KAAKO,WACjB,2BAAOW,UAAU,uBAAuBS,QAAQ,mBAElD,0BAAMxB,MAAO,CAAEyB,MAAO5B,KAAKE,MAAMQ,SAAW,UAAY,YAAa,uBAAGQ,UAAU,kBAEpF,yBAAKf,MAAO,CAAE0B,WAAY,OAAQC,SAAU,SAAU1B,UAAW,WAAjE,SAIA,kBAAC,EAAD,CAAMF,MAAOF,KAAKE,QACpB,8BACE,yBAAKC,MAAO,CAAEC,UAAW,WAAzB,wBACwBJ,KAAKE,MAAMQ,SAAW,cAAgB,iBAE9D,yBAAKP,MAAO,CAAEC,UAAW,WAAzB,0E,GApDM2B,IAAM1B,YGIJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c2991a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        const { state } = this.props\n        return (\n                <div style={{textAlign: \"center\"}}>\n                    Home Page\n                </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Home from './components/Home'\nimport Ex1 from './components/Ex1'\nimport Ex2 from './components/Ex2'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      darkMode: false\n    }\n  }\n\n  componentDidMount() {\n    const darkMode = JSON.parse(localStorage.getItem('darkMode'))\n    this.setState((prevState) => {\n      return { darkMode: darkMode }\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const darkMode = JSON.stringify(this.state.darkMode)\n    localStorage.setItem('darkMode', darkMode)\n  }\n\n  onChange = () => {\n    this.setState((prevState) => {\n      return { darkMode: !prevState.darkMode }\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className={this.state.darkMode ? \"dark-mode\" : \"normal-mode\"}>\n          <nav style={{ marginBottom: '1.5rem', backgroundColor: this.state.darkMode ? '#0A5C3B' : '#1ae895', height: '7rem' }}>\n            <div className=\"custom-control custom-switch\" style={{ textAlign: 'right', paddingRight: '1.5rem', paddingTop: '0.5rem' }}>\n              <span>\n                <input\n                  type=\"checkbox\"\n                  className=\"custom-control-input\"\n                  id=\"customSwitch1\"\n                  checked={this.state.darkMode}\n                  onChange={this.onChange} />\n                <label className=\"custom-control-label\" htmlFor=\"customSwitch1\"></label>\n              </span>\n              <span style={{ color: this.state.darkMode ? '#fffc38' : '#adb5bd' }}><i className=\"fas fa-moon\"></i></span>\n            </div>\n            <div style={{ fontWeight: 'bold', fontSize: '1.5rem', textAlign: 'center' }}>\n              Test\n            </div>\n          </nav>    \n            <Home state={this.state} />\n          <main>\n            <div style={{ textAlign: \"center\" }}>\n              You Are Currently On {this.state.darkMode ? '\"Dark Mode\"' : '\"Normal Mode\"'}\n            </div>\n            <div style={{ textAlign: \"center\" }}>\n              Use The Switch At The Top To Change To Dark Mode Or Normal Mode\n            </div>\n          </main>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\n\nexport default class Ex1 extends Component {\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n                Ex1 Page\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Ex2 extends Component {\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n                Ex2 Page\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}